# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_id=None, trs_id=None, wes_default='local', wes_opts=None, workflow_attachments=None, workflow_type='CWL', workflow_inputs=None, workflow_url=None, default_payload=None):  # noqa: E501
        """Queue - a model defined in OpenAPI

        :param queue_id: The queue_id of this Queue.  # noqa: E501
        :type queue_id: int
        :param trs_id: The trs_id of this Queue.  # noqa: E501
        :type trs_id: int
        :param wes_default: The wes_default of this Queue.  # noqa: E501
        :type wes_default: str
        :param wes_opts: The wes_opts of this Queue.  # noqa: E501
        :type wes_opts: List[str]
        :param workflow_attachments: The workflow_attachments of this Queue.  # noqa: E501
        :type workflow_attachments: List[file]
        :param workflow_type: The workflow_type of this Queue.  # noqa: E501
        :type workflow_type: str
        :param workflow_inputs: The workflow_inputs of this Queue.  # noqa: E501
        :type workflow_inputs: object
        :param workflow_url: The workflow_url of this Queue.  # noqa: E501
        :type workflow_url: file
        :param default_payload: The default_payload of this Queue.  # noqa: E501
        :type default_payload: object
        """
        self.openapi_types = {
            'queue_id': int,
            'trs_id': int,
            'wes_default': str,
            'wes_opts': List[str],
            'workflow_attachments': List[file],
            'workflow_type': str,
            'workflow_inputs': object,
            'workflow_url': file,
            'default_payload': object
        }

        self.attribute_map = {
            'queue_id': 'queueId',
            'trs_id': 'trs_id',
            'wes_default': 'wes_default',
            'wes_opts': 'wes_opts',
            'workflow_attachments': 'workflow_attachments',
            'workflow_type': 'workflow_type',
            'workflow_inputs': 'workflow_inputs',
            'workflow_url': 'workflow_url',
            'default_payload': 'default_payload'
        }

        self._queue_id = queue_id
        self._trs_id = trs_id
        self._wes_default = wes_default
        self._wes_opts = wes_opts
        self._workflow_attachments = workflow_attachments
        self._workflow_type = workflow_type
        self._workflow_inputs = workflow_inputs
        self._workflow_url = workflow_url
        self._default_payload = default_payload

    @classmethod
    def from_dict(cls, dikt) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Queue of this Queue.  # noqa: E501
        :rtype: Queue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_id(self):
        """Gets the queue_id of this Queue.


        :return: The queue_id of this Queue.
        :rtype: int
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this Queue.


        :param queue_id: The queue_id of this Queue.
        :type queue_id: int
        """

        self._queue_id = queue_id

    @property
    def trs_id(self):
        """Gets the trs_id of this Queue.


        :return: The trs_id of this Queue.
        :rtype: int
        """
        return self._trs_id

    @trs_id.setter
    def trs_id(self, trs_id):
        """Sets the trs_id of this Queue.


        :param trs_id: The trs_id of this Queue.
        :type trs_id: int
        """

        self._trs_id = trs_id

    @property
    def wes_default(self):
        """Gets the wes_default of this Queue.


        :return: The wes_default of this Queue.
        :rtype: str
        """
        return self._wes_default

    @wes_default.setter
    def wes_default(self, wes_default):
        """Sets the wes_default of this Queue.


        :param wes_default: The wes_default of this Queue.
        :type wes_default: str
        """

        self._wes_default = wes_default

    @property
    def wes_opts(self):
        """Gets the wes_opts of this Queue.


        :return: The wes_opts of this Queue.
        :rtype: List[str]
        """
        return self._wes_opts

    @wes_opts.setter
    def wes_opts(self, wes_opts):
        """Sets the wes_opts of this Queue.


        :param wes_opts: The wes_opts of this Queue.
        :type wes_opts: List[str]
        """

        self._wes_opts = wes_opts

    @property
    def workflow_attachments(self):
        """Gets the workflow_attachments of this Queue.


        :return: The workflow_attachments of this Queue.
        :rtype: List[file]
        """
        return self._workflow_attachments

    @workflow_attachments.setter
    def workflow_attachments(self, workflow_attachments):
        """Sets the workflow_attachments of this Queue.


        :param workflow_attachments: The workflow_attachments of this Queue.
        :type workflow_attachments: List[file]
        """

        self._workflow_attachments = workflow_attachments

    @property
    def workflow_type(self):
        """Gets the workflow_type of this Queue.


        :return: The workflow_type of this Queue.
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this Queue.


        :param workflow_type: The workflow_type of this Queue.
        :type workflow_type: str
        """
        allowed_values = ["CWL", "WDL", "nextflow", "kubeflow"]  # noqa: E501
        if workflow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_type` ({0}), must be one of {1}"
                .format(workflow_type, allowed_values)
            )

        self._workflow_type = workflow_type

    @property
    def workflow_inputs(self):
        """Gets the workflow_inputs of this Queue.


        :return: The workflow_inputs of this Queue.
        :rtype: object
        """
        return self._workflow_inputs

    @workflow_inputs.setter
    def workflow_inputs(self, workflow_inputs):
        """Sets the workflow_inputs of this Queue.


        :param workflow_inputs: The workflow_inputs of this Queue.
        :type workflow_inputs: object
        """

        self._workflow_inputs = workflow_inputs

    @property
    def workflow_url(self):
        """Gets the workflow_url of this Queue.


        :return: The workflow_url of this Queue.
        :rtype: file
        """
        return self._workflow_url

    @workflow_url.setter
    def workflow_url(self, workflow_url):
        """Sets the workflow_url of this Queue.


        :param workflow_url: The workflow_url of this Queue.
        :type workflow_url: file
        """

        self._workflow_url = workflow_url

    @property
    def default_payload(self):
        """Gets the default_payload of this Queue.


        :return: The default_payload of this Queue.
        :rtype: object
        """
        return self._default_payload

    @default_payload.setter
    def default_payload(self, default_payload):
        """Sets the default_payload of this Queue.


        :param default_payload: The default_payload of this Queue.
        :type default_payload: object
        """

        self._default_payload = default_payload
