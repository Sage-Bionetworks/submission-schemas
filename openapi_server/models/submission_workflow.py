# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SubmissionWorkflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_type=None, workflow=None):  # noqa: E501
        """SubmissionWorkflow - a model defined in OpenAPI

        :param workflow_type: The workflow_type of this SubmissionWorkflow.  # noqa: E501
        :type workflow_type: str
        :param workflow: The workflow of this SubmissionWorkflow.  # noqa: E501
        :type workflow: file
        """
        self.openapi_types = {
            'workflow_type': str,
            'workflow': file
        }

        self.attribute_map = {
            'workflow_type': 'workflowType',
            'workflow': 'workflow'
        }

        self._workflow_type = workflow_type
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt) -> 'SubmissionWorkflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Submission_workflow of this SubmissionWorkflow.  # noqa: E501
        :rtype: SubmissionWorkflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_type(self):
        """Gets the workflow_type of this SubmissionWorkflow.

        Workflow type  # noqa: E501

        :return: The workflow_type of this SubmissionWorkflow.
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this SubmissionWorkflow.

        Workflow type  # noqa: E501

        :param workflow_type: The workflow_type of this SubmissionWorkflow.
        :type workflow_type: str
        """
        allowed_values = ["kubeflow", "nextflow", "cwl", "wdl"]  # noqa: E501
        if workflow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_type` ({0}), must be one of {1}"
                .format(workflow_type, allowed_values)
            )

        self._workflow_type = workflow_type

    @property
    def workflow(self):
        """Gets the workflow of this SubmissionWorkflow.

        Workflow URL or path  # noqa: E501

        :return: The workflow of this SubmissionWorkflow.
        :rtype: file
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this SubmissionWorkflow.

        Workflow URL or path  # noqa: E501

        :param workflow: The workflow of this SubmissionWorkflow.
        :type workflow: file
        """

        self._workflow = workflow
